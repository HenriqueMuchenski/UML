// Serializable é o processo de salvar ou transliterar um objeto em outro em um meio de 
// armazenamento como um arquivo de computador ou um buffer de memória) ou 
// transmiti-lo por uma conexão de rede, seja em forma binária ou em formato de texto 
// como o XML ou JSON.

// As anotações para componentes realizam várias funcionalidades para a classe
// um exemplo, é a possibilidade de injeção de dependencia com o @Autowired.

// @PathVariable é utilizado quando o valor da variável é passada diretamente na URL.

// CommandLineRunner serve para conseguirmos adicionar métodos auxiliares
// ao aplicação ser inicializada.

// Como Categoria x Produto possuem o relacionamento Muitos para Muitos
// iremos necessitar de uma tabela de associação no banco de dados.

// Esta tabela de associação é criada a partir da anotação @JoinTable
// e esta anotação deve ficar apenas em uma das duas classes do relacionamento.
// É recomendado que esta anotação fique do lado mais forte da associação.
// Do outro lado, apenas iremos informar em qual atributo a relação esta sendo mapeada.

// Para resolver o problema de chamada cíclica de informações no formato Json

// Exemplo do problema tentando buscar uma categoria em uma relação 1 para 1 com um produto:
// Categoria -> Produto(Categoria->Produto(Categoria->Produto)) infinitamente

// Para resolver isso, utilizamos a anotação @JsonManagedReference, que faz com que os dados associados
// sejam carregados ao transformar o objeto em JSON.
// E para controlar o looping, do outro lado da associação, utilizamos a anotação @JsonBackReference,
// que irá ignorar os dados da outra classe que está associada.

// Não se usa, normalmente, blocos try-catch em métodos de controladores REST.
// Caso ocorram exceções, retornamos um objeto padrão de exceção no corpo da resposta.

// @ControllerAdvice é uma anotação para classes que interceptam e lançam exceções ao corpo da resposta.
// Dentro de uma classe ControllerAdvice existem métodos @ExceptionHandler(ObjectNotFoundException.class)
// Que dentro da anotação recebem como parâmetro a exceção que realizarão o tratamento.

// A anotação @JoinColumn indica que essa entidade é a proprietária do relacionamento (ou seja: a tabela correspondente 
// tem uma coluna com uma chave estrangeira para a tabela referenciada), 
// enquanto o atributo mappedBy indica que a entidade deste lado é o inverso do relacionamento e o proprietário reside na entidade “outro”. 
// Isso também significa que você pode acessar a outra tabela da classe que anotou com “mappedBy” (relacionamento totalmente bidirecional).

// Como a associação entre endereço e cidade é direcionada(só possui uma direção)
// não há risco de serialização cíclica do JSON.
// A cidade, neste caso, não conhece os endereços.
// Mas o endereço conhece a cidade.

// Quando queremos que duas classes diferentes possuam o mesmo id
// utilizamos a anotação @MapsId em uma destas classes, no atributo 
// que representa o relacionamento entre elas.
// Na outra classe, utilizaremos a anotação @Relacionamento(cascade = CascadeType.ALL)

// Quando a relação é 1 para 1, podemos fazer com que o id dessas classes sejam o mesmo.

// cascade = CascadeType.ALL
// Define o conjunto de operações em cascata que são propagadas
// à entidade associada.

// cascade=ALL is equivalent to cascade={PERSIST, MERGE, REMOVE, REFRESH, DETACH}

// Anotação para mapear também as subclasses.
// @Inheritance(strategy = InheritanceType.JOINED)

// A chave de uma classe de associação deve ser composta.
// Anotação para uma classe que é um sub-tipo
// @Embeddable
// @EmbeddedId para definir que um id provem de uma classe composta


// Gerando uma tabela para uma coleção.
// @ElementCollection
// @CollectionTable(name = "TELEFONE")